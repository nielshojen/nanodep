// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getAssignerProfile = `-- name: GetAssignerProfile :one
SELECT
  assigner_profile_uuid,
  assigner_profile_uuid_at
FROM
  dep_names
WHERE
  name = $1
`

type GetAssignerProfileRow struct {
	AssignerProfileUuid   sql.NullString
	AssignerProfileUuidAt sql.NullTime
}

func (q *Queries) GetAssignerProfile(ctx context.Context, name string) (GetAssignerProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getAssignerProfile, name)
	var i GetAssignerProfileRow
	err := row.Scan(&i.AssignerProfileUuid, &i.AssignerProfileUuidAt)
	return i, err
}

const getAuthTokens = `-- name: GetAuthTokens :one
SELECT
  consumer_key,
  consumer_secret,
  access_token,
  access_secret,
  access_token_expiry
FROM
  dep_names
WHERE
  name = $1
`

type GetAuthTokensRow struct {
	ConsumerKey       sql.NullString
	ConsumerSecret    sql.NullString
	AccessToken       sql.NullString
	AccessSecret      sql.NullString
	AccessTokenExpiry sql.NullTime
}

func (q *Queries) GetAuthTokens(ctx context.Context, name string) (GetAuthTokensRow, error) {
	row := q.db.QueryRowContext(ctx, getAuthTokens, name)
	var i GetAuthTokensRow
	err := row.Scan(
		&i.ConsumerKey,
		&i.ConsumerSecret,
		&i.AccessToken,
		&i.AccessSecret,
		&i.AccessTokenExpiry,
	)
	return i, err
}

const getConfigBaseURL = `-- name: GetConfigBaseURL :one
SELECT config_base_url FROM dep_names WHERE name = $1
`

func (q *Queries) GetConfigBaseURL(ctx context.Context, name string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getConfigBaseURL, name)
	var config_base_url sql.NullString
	err := row.Scan(&config_base_url)
	return config_base_url, err
}

const getCurrentKeypair = `-- name: GetCurrentKeypair :one
SELECT
  tokenpki_cert_pem,
  tokenpki_key_pem
FROM
  dep_names
WHERE
  name = $1
`

type GetCurrentKeypairRow struct {
	TokenpkiCertPem []byte
	TokenpkiKeyPem  []byte
}

func (q *Queries) GetCurrentKeypair(ctx context.Context, name string) (GetCurrentKeypairRow, error) {
	row := q.db.QueryRowContext(ctx, getCurrentKeypair, name)
	var i GetCurrentKeypairRow
	err := row.Scan(&i.TokenpkiCertPem, &i.TokenpkiKeyPem)
	return i, err
}

const getStagingKeypair = `-- name: GetStagingKeypair :one
SELECT
  tokenpki_staging_cert_pem,
  tokenpki_staging_key_pem
FROM
  dep_names
WHERE
  name = $1
`

type GetStagingKeypairRow struct {
	TokenpkiStagingCertPem []byte
	TokenpkiStagingKeyPem  []byte
}

func (q *Queries) GetStagingKeypair(ctx context.Context, name string) (GetStagingKeypairRow, error) {
	row := q.db.QueryRowContext(ctx, getStagingKeypair, name)
	var i GetStagingKeypairRow
	err := row.Scan(&i.TokenpkiStagingCertPem, &i.TokenpkiStagingKeyPem)
	return i, err
}

const getSyncerCursor = `-- name: GetSyncerCursor :one
SELECT syncer_cursor FROM dep_names WHERE name = $1
`

func (q *Queries) GetSyncerCursor(ctx context.Context, name string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getSyncerCursor, name)
	var syncer_cursor sql.NullString
	err := row.Scan(&syncer_cursor)
	return syncer_cursor, err
}

const storeAssignerProfile = `-- name: StoreAssignerProfile :exec
INSERT INTO dep_names (
  name, assigner_profile_uuid, 
  assigner_profile_uuid_at
) VALUES (
  $1, $2, CURRENT_TIMESTAMP
) ON CONFLICT (name) DO UPDATE SET
assigner_profile_uuid = excluded.assigner_profile_uuid,
assigner_profile_uuid_at = excluded.assigner_profile_uuid_at
`

type StoreAssignerProfileParams struct {
	Name                string
	AssignerProfileUuid sql.NullString
}

func (q *Queries) StoreAssignerProfile(ctx context.Context, arg StoreAssignerProfileParams) error {
	_, err := q.db.ExecContext(ctx, storeAssignerProfile, arg.Name, arg.AssignerProfileUuid)
	return err
}

const storeAuthTokens = `-- name: StoreAuthTokens :exec
INSERT INTO dep_names (
  name, consumer_key, consumer_secret,
  access_token, access_secret,
  access_token_expiry
) VALUES (
  $1, $2, $3, $4, $5, $6
 ) ON conflict (name) DO UPDATE SET
  consumer_key = excluded.consumer_key,
  consumer_secret = excluded.consumer_secret,
  access_token = excluded.access_token,
  access_secret = excluded.access_secret,
  access_token_expiry = excluded.access_token_expiry
`

type StoreAuthTokensParams struct {
	Name              string
	ConsumerKey       sql.NullString
	ConsumerSecret    sql.NullString
	AccessToken       sql.NullString
	AccessSecret      sql.NullString
	AccessTokenExpiry sql.NullTime
}

func (q *Queries) StoreAuthTokens(ctx context.Context, arg StoreAuthTokensParams) error {
	_, err := q.db.ExecContext(ctx, storeAuthTokens,
		arg.Name,
		arg.ConsumerKey,
		arg.ConsumerSecret,
		arg.AccessToken,
		arg.AccessSecret,
		arg.AccessTokenExpiry,
	)
	return err
}

const storeConfig = `-- name: StoreConfig :exec
INSERT INTO dep_names (
  name, config_base_url
) VALUES ($1, $2) 
ON conflict (name) DO UPDATE SET
config_base_url = excluded.config_base_url
`

type StoreConfigParams struct {
	Name          string
	ConfigBaseUrl sql.NullString
}

func (q *Queries) StoreConfig(ctx context.Context, arg StoreConfigParams) error {
	_, err := q.db.ExecContext(ctx, storeConfig, arg.Name, arg.ConfigBaseUrl)
	return err
}

const storeCursor = `-- name: StoreCursor :exec
INSERT INTO dep_names (
  name, syncer_cursor
) VALUES (
  $1, $2
) ON CONFLICT (name) DO UPDATE SET
syncer_cursor = excluded.syncer_cursor
`

type StoreCursorParams struct {
	Name         string
	SyncerCursor sql.NullString
}

func (q *Queries) StoreCursor(ctx context.Context, arg StoreCursorParams) error {
	_, err := q.db.ExecContext(ctx, storeCursor, arg.Name, arg.SyncerCursor)
	return err
}

const storeTokenPKI = `-- name: StoreTokenPKI :exec
INSERT INTO dep_names (
  name, tokenpki_staging_cert_pem,
  tokenpki_staging_key_pem
) VALUES (
  $1, $2, $3
) ON CONFLICT (name) DO UPDATE SET
tokenpki_staging_cert_pem = excluded.tokenpki_staging_cert_pem,
tokenpki_staging_key_pem = excluded.tokenpki_staging_key_pem
`

type StoreTokenPKIParams struct {
	Name                   string
	TokenpkiStagingCertPem []byte
	TokenpkiStagingKeyPem  []byte
}

func (q *Queries) StoreTokenPKI(ctx context.Context, arg StoreTokenPKIParams) error {
	_, err := q.db.ExecContext(ctx, storeTokenPKI, arg.Name, arg.TokenpkiStagingCertPem, arg.TokenpkiStagingKeyPem)
	return err
}

const upstageKeypair = `-- name: UpstageKeypair :exec
UPDATE
  dep_names
SET
  tokenpki_cert_pem = tokenpki_staging_cert_pem,
  tokenpki_key_pem = tokenpki_staging_key_pem
WHERE
  name = $1
`

func (q *Queries) UpstageKeypair(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, upstageKeypair, name)
	return err
}
